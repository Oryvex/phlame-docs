"use strict";(self.webpackChunktest_api=self.webpackChunktest_api||[]).push([[4640],{5816:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=t(4848),s=t(8453);const o={title:"Send",sidebar_position:4},r=void 0,i={id:"response-management/send",title:"Send",description:"In Phlame, the send function serves as a crucial component for handling API responses. This function allows you to send data to clients in a structured format, with options for customizing the response status, format, and additional headers or footers. Let's delve into the signature and functionality of the send function in Phlame:",source:"@site/docs/response-management/send.md",sourceDirName:"response-management",slug:"/response-management/send",permalink:"/docs/response-management/send",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Send",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Join",permalink:"/docs/response-management/join"},next:{title:"Additional Functions",permalink:"/docs/response-management/additional-functions"}},d={},l=[{value:"Function Signature:",id:"function-signature",level:3},{value:"Parameters:",id:"parameters",level:3},{value:"Example Usage (JSON):",id:"example-usage-json",level:3},{value:"Api Output (JSON)",id:"api-output-json",level:3},{value:"Example Usage (XML):",id:"example-usage-xml",level:3},{value:"Api Output (XML)",id:"api-output-xml",level:3},{value:"Functionality:",id:"functionality",level:3}];function c(e){const n={admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"In Phlame, the send function serves as a crucial component for handling API responses. This function allows you to send data to clients in a structured format, with options for customizing the response status, format, and additional headers or footers. Let's delve into the signature and functionality of the send function in Phlame:"}),"\n",(0,a.jsx)(n.h3,{id:"function-signature",children:"Function Signature:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"Api::send($data, $key, $status, $format, $header, $footer, $ignoreformat);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"parameters",children:"Parameters:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"$data"}),": The array of data to be sent in the response."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"$key"}),": The key to be used for the data in the final output. Default: 'segments'"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"$status"}),": The HTTP status code to be included in the response. Default: 200"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"$format"}),": The format of the response data (e.g., 'json' or 'XML'). Any other format will throw an error if ",(0,a.jsx)(n.code,{children:"$ignoreformat"})," is false. Default: json"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"$header"}),": An optional array of additional headers to be included before the data."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"$footer"}),": An optional array of additional data to be included after the main data."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"$ignoreformat"}),": A boolean flag indicating whether to ignore the specified format and send the data as is. Default: false"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"example-usage-json",children:"Example Usage (JSON):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"// Sending JSON data with a custom key, header, footer, and status code\r\n// Note: Source format must be JSON\r\n$data = Api::segment('out', ['test'=>'data']);\r\nApi::send($data, \r\n          key:'response', \r\n          status:418, \r\n          header: [\"loc\" => \"head\"], \r\n          footer: [\"loc\" => \"foot\"], \r\n          format:'json'\r\n);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"api-output-json",children:"Api Output (JSON)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\r\n  "header": {\r\n    "loc": "head"\r\n  },\r\n  "response": {\r\n    "out": {\r\n      "test": "data"\r\n    }\r\n  },\r\n  "footer": {\r\n    "loc": "foot"\r\n  }\r\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-usage-xml",children:"Example Usage (XML):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"// Sending XML data with a custom key, header, footer, and status code\r\n// Note: Source format must be XML\r\n$data = Api::segment('out', ['test'=>'data']);\r\nApi::send($data, \r\n          key:'response', \r\n          status:418, \r\n          header: [\"loc\" => \"head\"], \r\n          footer: [\"loc\" => \"foot\"], \r\n          format:'xml'\r\n);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"api-output-xml",children:"Api Output (XML)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:"<root>\r\n  <header>\r\n\t<loc>head</loc>\r\n  </header>\r\n  <response>\r\n\t<out>\r\n\t  <test>failed</test>\r\n\t</out>\r\n  </response>\r\n  <footer>\r\n\t<loc>foot</loc>\r\n  </footer>\r\n</root>\n"})}),"\n",(0,a.jsx)(n.h3,{id:"functionality",children:"Functionality:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"send"})," function allows you to send data to clients in a structured format, such as JSON or XML."]}),"\n",(0,a.jsx)(n.li,{children:"You can customize the response status code, format, and other aspects of the response."}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"$data"})," parameter represents the main content of the response."]}),"\n",(0,a.jsxs)(n.li,{children:["You can specify a custom key (",(0,a.jsx)(n.code,{children:"$key"}),") to be used for the data in the final output."]}),"\n",(0,a.jsxs)(n.li,{children:["Additional headers (",(0,a.jsx)(n.code,{children:"$header"}),") and footer data (",(0,a.jsx)(n.code,{children:"$footer"}),") can be included before and after the main data, respectively."]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"$ignoreformat"})," parameter determines whether to ignore the specified format and send the data as is."]}),"\n"]}),"\n",(0,a.jsxs)(n.admonition,{type:"tip",children:[(0,a.jsxs)(n.p,{children:["You can use the function ",(0,a.jsx)(n.code,{children:"Api::sendraw()"})," to send raw data [no formatting] with just status code and data.\r\nExample:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"Api::sendraw($data, status: 200);\n"})}),(0,a.jsx)(n.p,{children:"status is null by default in sendraw"})]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var a=t(6540);const s={},o=a.createContext(s);function r(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);