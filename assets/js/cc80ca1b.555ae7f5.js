"use strict";(self.webpackChunktest_api=self.webpackChunktest_api||[]).push([[1796],{4235:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>n,metadata:()=>o,toc:()=>d});var a=s(4848),r=s(8453);const n={title:"Request Parameters",sidebar_position:5},i=void 0,o={id:"handling-requests/params-method",title:"Request Parameters",description:"In Phlame's API development toolkit, the params method within the API class provides a straightforward approach to handle HTTP request bodies in incoming requests. This method offers developers flexibility and simplicity, enabling them to process request payloads efficiently and execute custom logic based on the contents. Let's explore the syntax and usage of the params method:",source:"@site/docs/handling-requests/params-method.md",sourceDirName:"handling-requests",slug:"/handling-requests/params-method",permalink:"/docs/handling-requests/params-method",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Request Parameters",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Request Body",permalink:"/docs/handling-requests/body-method"},next:{title:"Request Authorization",permalink:"/docs/handling-requests/auth-method"}},l={},d=[{value:"Retrieving Request Params",id:"retrieving-request-params",level:3},{value:"<code>Api::params()</code>:",id:"apiparams",level:4},{value:"Handling Results with Callbacks",id:"handling-results-with-callbacks",level:3},{value:"Then Callback:",id:"then-callback",level:4},{value:"Orelse Callback:",id:"orelse-callback",level:4},{value:"Example of the params Method",id:"example-of-the-params-method",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["In Phlame's API development toolkit, the ",(0,a.jsx)(t.code,{children:"params"})," method within the API class provides a straightforward approach to handle HTTP request bodies in incoming requests. This method offers developers flexibility and simplicity, enabling them to process request payloads efficiently and execute custom logic based on the contents. Let's explore the syntax and usage of the ",(0,a.jsx)(t.code,{children:"params"})," method:"]}),"\n",(0,a.jsx)(t.h3,{id:"retrieving-request-params",children:"Retrieving Request Params"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"params"})," method allows developers to access the content of the HTTP request params. Here's how you can use it:"]}),"\n",(0,a.jsxs)(t.h4,{id:"apiparams",children:[(0,a.jsx)(t.code,{children:"Api::params()"}),":"]}),"\n",(0,a.jsx)(t.p,{children:"This method retrieves the entire request parameters and returns it as a string, with a status, true, if the parameters exists."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-php",children:"Api::params();\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["Other functions of the ",(0,a.jsx)(t.code,{children:"params"})," method functions similar to the ",(0,a.jsx)(t.code,{children:"headers"})," method, it takes the same parameters as the ",(0,a.jsx)(t.code,{children:"headers"})," method, check the ",(0,a.jsx)(t.a,{href:"./headers-method",children:"headers method"})," out for more information"]})}),"\n",(0,a.jsx)(t.h3,{id:"handling-results-with-callbacks",children:"Handling Results with Callbacks"}),"\n",(0,a.jsxs)(t.p,{children:["Similar to the ",(0,a.jsx)(t.code,{children:"headers"})," method, the ",(0,a.jsx)(t.code,{children:"params"})," method also supports ",(0,a.jsx)(t.code,{children:"then:"})," and ",(0,a.jsx)(t.code,{children:"orelse:"})," callbacks, allowing developers to execute custom logic based on the contents of the request params:"]}),"\n",(0,a.jsx)(t.h4,{id:"then-callback",children:"Then Callback:"}),"\n",(0,a.jsxs)(t.p,{children:["This callback runs when the parameters retrieval is successful, and the ",(0,a.jsx)(t.code,{children:"status"})," is ",(0,a.jsx)(t.code,{children:"true"}),", providing developers with the request parameters content. It allows for processing and manipulation of the request data."]}),"\n",(0,a.jsx)(t.h4,{id:"orelse-callback",children:"Orelse Callback:"}),"\n",(0,a.jsxs)(t.p,{children:["In case the parameters retrieval fails, and the ",(0,a.jsx)(t.code,{children:"status"})," is ",(0,a.jsx)(t.code,{children:"false"}),", the ",(0,a.jsx)(t.code,{children:"orelse:"})," callback is executed. This provides developers with a fallback mechanism to handle such scenarios gracefully."]}),"\n",(0,a.jsxs)(t.admonition,{type:"tip",children:[(0,a.jsxs)(t.p,{children:["You can utilize the ",(0,a.jsx)(t.code,{children:"$rout"})," variable within the callback functions to access the data returned by the ",(0,a.jsx)(t.code,{children:"params"})," method, which includes:"]}),(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Status"}),"\n",(0,a.jsx)(t.li,{children:"Data"}),"\n"]})]}),"\n",(0,a.jsx)(t.h3,{id:"example-of-the-params-method",children:"Example of the params Method"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-php",metastring:'title="<filename>.src.php"',children:'<?php\r\nApi::params(\r\n    key: "key",\r\n    value: "value",\r\n    then: function($rout) {\r\n        // Custom logic to process the request params\r\n        $params = $rout[\'data\']; // Accessing the request params content\r\n    },\r\n    orelse: function() {\r\n        // Fallback logic for handling empty or malformed request bodies\r\n    }\r\n);\r\n?>\n'})}),"\n",(0,a.jsxs)(t.p,{children:["This example illustrates how to use the ",(0,a.jsx)(t.code,{children:"params"})," method to retrieve and process the content of the HTTP request params. Depending on the success or failure of the params retrieval, the appropriate callback is executed, allowing developers to handle request params processing effectively."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>o});var a=s(6540);const r={},n=a.createContext(r);function i(e){const t=a.useContext(n);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(n.Provider,{value:t},e.children)}}}]);