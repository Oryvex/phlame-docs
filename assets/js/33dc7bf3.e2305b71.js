"use strict";(self.webpackChunktest_api=self.webpackChunktest_api||[]).push([[6672],{9778:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var i=t(4848),s=t(8453);const o={title:"Join",sidebar_position:3},r=void 0,a={id:"response-management/join",title:"Join",description:"In Phlame, the join function provides a straightforward way to combine multiple segments into a single, properly ordered array output. This functionality is particularly useful when you need to aggregate data from different sources or segments and ensure that the resulting array follows a specific order. Let's explore how the join function works and its benefits in API development:",source:"@site/docs/response-management/join.md",sourceDirName:"response-management",slug:"/response-management/join",permalink:"/docs/response-management/join",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Join",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Segmentation",permalink:"/docs/response-management/segmentation"},next:{title:"Send",permalink:"/docs/response-management/send"}},l={},d=[{value:"Function Signature",id:"function-signature",level:3},{value:"Parameters:",id:"parameters",level:3},{value:"Example Usage:",id:"example-usage",level:3},{value:"Functionality:",id:"functionality",level:3},{value:"Benefits of Using join:",id:"benefits-of-using-join",level:3}];function c(e){const n={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"In Phlame, the join function provides a straightforward way to combine multiple segments into a single, properly ordered array output. This functionality is particularly useful when you need to aggregate data from different sources or segments and ensure that the resulting array follows a specific order. Let's explore how the join function works and its benefits in API development:"}),"\n",(0,i.jsx)(n.h3,{id:"function-signature",children:"Function Signature"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"Api::join($segment1, $segment2, ..., $segmentN);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"parameters",children:"Parameters:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$segment1"}),", ",(0,i.jsx)(n.code,{children:"$segment2"}),", ..., ",(0,i.jsx)(n.code,{children:"$segmentN"}),": The segments to be joined together in the desired order."]}),"\n",(0,i.jsx)(n.h3,{id:"example-usage",children:"Example Usage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"// Joining multiple segments to create a unified array output\r\n$result = Api::join($segment1, $segment2, $segment3);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"functionality",children:"Functionality:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The join function takes multiple segments as input parameters."}),"\n",(0,i.jsx)(n.li,{children:"It combines the data from each segment into a single array output."}),"\n",(0,i.jsx)(n.li,{children:"The segments are joined together in the order specified in the function call."}),"\n",(0,i.jsx)(n.li,{children:"If a segment is not found or empty, it is skipped in the output array."}),"\n",(0,i.jsx)(n.li,{children:"The resulting array preserves the order of the segments, ensuring that the output follows the specified sequence."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"benefits-of-using-join",children:"Benefits of Using join:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Consolidation"}),": join allows you to consolidate data from multiple segments into a single array output, simplifying data aggregation and processing."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Order Control"}),": You can specify the order in which segments are joined, ensuring that the resulting array follows a predefined sequence."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Flexibility"}),": join provides flexibility by accommodating segments of varying lengths and contents, allowing for dynamic data aggregation based on specific requirements."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Simplicity"}),": The function offers a simple and intuitive way to combine segments, reducing the complexity of data manipulation and aggregation tasks."]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);